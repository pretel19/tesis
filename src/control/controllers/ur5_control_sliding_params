#!/usr/bin/env python3

import rospy
import actionlib
import tf

import sys
sys.path.insert(0, '/home/sergio/ros_ws/src/utec/src/functions')
from ur5_params import *
from ur_kinematics_functions import *
from ur5_sliding_functions import *

from sensor_msgs.msg import JointState
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

ur5_control = open("/home/sergio/ros_ws/src/utec/data/ur5_sliding_opt_newdata_sign1.txt", "w") 
ur5_control.truncate(0)

# =============================================================
# Configuracion articular inicial (rad)
q = np.radians(np.array([-90.0, -90.0, 90.0, -90.0, -90.0, 0.0]))
q0 = np.radians(np.array([-90.0, -90.0, 90.0, -90.0, -90.0, 0.0]))
# Velocidad articular inicial (rad/s)
dq = np.array([0., 0., 0., 0., 0., 0.])
# Aceleracion inicial (rad/s2)
ddq = np.array([0., 0., 0., 0., 0., 0.])

# Posicion deseada
xd = np.array([-0.10415,  0.7469,  0.236859])
if check_ur_ws(xd,r_ws) == True:
	print("Posicion deseada alcanzable")
else:
	print("Posicion deseada inalcanzable")

# Configuracion articular deseada (rad)
qdes = ikine(xd,q,l)
# Velocidad articular deseada (rad/s)
dqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# Aceleracion articular deseada (rad/s2)
ddqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# =============================================================

# Modelo RBDL
modelo = rbdl.loadModel('/home/sergio/ros_ws/src/utec/urdf/ur5_xacro_mod.urdf')
ndof   = modelo.q_size     # Grados de libertad

# Arrays numpy para almacenar el modelo dinamico
b     = np.zeros(ndof)          # Para el vector de efectos no lineales
M     = np.zeros([ndof, ndof])  # Para la matriz de inercia

#Array numpy para almacenar
q_real = np.zeros(ndof)
dq_real = np.zeros(ndof)
uq = np.zeros(ndof)

#Vectores para almacenar las caracteristicas del control
ctrlled = False
ess = 0
t_real = 0
#u_v = []

def callback(msg):

	global q_real, dq_real
	
	q_real = msg.position
	q_real = np.asarray(q_real)
	q_real[[0,2]] = q_real[[2,0]]

	dq_real = msg.velocity
	dq_real = np.asarray(dq_real)
	dq_real[[0,2]] = dq_real[[2,0]]

if __name__ == '__main__':

	rospy.init_node("ur5_control_sliding_params", anonymous=True, disable_signals=True)
	rospy.Subscriber("/robot2/joint_states", JointState, callback)
	
	#robot_client = actionlib.SimpleActionClient('/robot2/scaled_pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
	robot_client = actionlib.SimpleActionClient('/robot2/pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
	print("Waiting for server...")
	robot_client.wait_for_server()
	print("Connected to server")

	tf_listener = tf.TransformListener()

	joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

	#Configuracion articular inicial
	Q0 = q0.tolist()

	g = FollowJointTrajectoryGoal()
	g.trajectory = JointTrajectory()
	g.trajectory.joint_names = joint_names

	# Frecuencia del envio (en Hz)
	freq = 100
	rate = rospy.Rate(freq)
	# Tiempo de muestreo
	dt = 1.0/freq
	
	#Tiempos	
	t = 1.0
	t_real = 0.0 + dt

	# Simulador dinamico del robot
	robot = Robot(q, dq, ddq, ndof, dt)

	# Parametros del controlador por modo deslizante
	lambda_v = np.arange(25000, 50000+500, 500)
	eta_v = np.arange(50, 1000+50, 50)
	#phi_v = np.arange(0.05, 1.0+0.05, 0.05)
	alpha = 1

	#Maxmimo error admisible
	epsilon = 1e-3
	#Flag para saber si se alcanzo los valores de q deseados
	Flag_pd = False
	
while not rospy.is_shutdown():

	for i in lambda_v:
	
		for j in eta_v:
		
			#for l in phi_v:

			#print('t = {}'.format(t))

			# Posicion articular inicial
			g.trajectory.points = [JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(t))]
			robot_client.send_goal(g)
			robot_client.wait_for_result()
			
			q = np.radians(np.array([-90.0, -90.0, 90.0, -90.0, -90.0, 0.0]))
			dq = np.array([0., 0., 0., 0., 0., 0.])
			ddq = np.array([0., 0., 0., 0., 0., 0.])
			
			robot = Robot(q, dq, ddq, ndof, dt)
			
			vlambd = i*np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) 
			lambd = np.diag(vlambd)
			eta = j
			#phi = l	
						
			Flag_pd = False
			ctrlled = False
			
			print('Lambda = {}, Eta = {}'.format(i,j))
			#print('Lambda = {}, Eta = {}, Phi = {}'.format(i,j,l))
						
			#Se verifica si se alcanzo la posicion deseada
			while Flag_pd == False:

				# Leer valores del simulador dinamico
				q = q_real
				dq = dq_real
				robot.update_q(q, dq)

				#Error de posicion y velocidad de las articulaciones
				err = qdes - q
				derr = dqdes - dq
				#print("Error: {}".format(np.round(np.linalg.norm(err),4))); 

				#Activar Flag si el error es menor al admisible
				trans = fkine(q_real,l)[0:3,3]
				if (np.linalg.norm(np.array(trans)-xd)<epsilon or t_real >= 20.0):
					Flag_pd = True
					#print("Posicion deseada alcanzada")
									
				else:

					# Control dinamico

					#Matriz de inercia
					rbdl.CompositeRigidBodyAlgorithm(modelo, q, M)
					#Vector de efectos no lineales
					rbdl.NonlinearEffects(modelo, q, dq, b)

					# Superficie de deslizamiento
					s = derr + np.dot(lambd,err)

					# Parametro k	
					k = eta + abs(alpha*np.dot(M,(ddqdes-np.dot(lambd,derr))) + alpha*b)
					#k = 1

					# Esfuerzo de control			
					u = b + np.dot(M,(ddqdes+s+k*np.sign(s))) 
					#u = b + np.dot(M,(ddqdes+s+k*sat_fnc(s,phi))) 
					#print(u)
					#u_v.append(u.tolist())
					#print(u_v)
					
					# Simulacion dinamica del robot
					uq = robot.torque_to_pos(u)

					#Se le asigna al Q0 la configuracion articular hallada
					Q = uq.tolist()

					t = t + dt

					g.trajectory.points = [JointTrajectoryPoint(positions=Q,time_from_start=rospy.Duration(t))]
					robot_client.send_goal(g)
					#robot_client.wait_for_result()
					#rate.sleep()
					
					# Esperar hasta la siguiente  iteracion
					
					t_real = t_real + dt
										
				rate.sleep()
								
			while not ctrlled:
			
				trans = fkine(q_real,l)[0:3,3]
				t_real = t_real + dt
			
				if np.linalg.norm(np.array(trans)-xd) <= epsilon:
					ctrlled = True
					ess = np.linalg.norm(np.array(trans)-xd)
					
					ur5_control.write(str(i)+' '+str(j)+' '+str(ess)+' '+str(t_real)+'\n ')
					#ur5_control.write(str(i)+' '+str(j)+' '+str(l)+' '+str(ess)+' '+str(t_real)+'\n ')
					rospy.loginfo("%s New data"%rospy.get_time())
					
					t_real = 0.0 + dt
					
					t = 1.0
											
					#u_max = np.amax(np.absolute(u_v))
					#print(ess, t_r)#, u_max)
				
				elif np.linalg.norm(np.array(trans)-xd) > epsilon and t_real >= 20.0:
				
					ctrlled = True
					
					t_real = 0.0 + dt
					
					t = 1.0
					
					rospy.loginfo("%s No data"%rospy.get_time())
								
				rate.sleep()
					
ur5_control.close()
