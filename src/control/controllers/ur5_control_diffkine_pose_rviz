#!/usr/bin/env python3

import rospy

from sensor_msgs.msg import JointState
from tf.transformations import quaternion_from_euler 

import sys
sys.path.insert(0, '/home/sergio/ros_ws/src/utec/src/functions')
from ur5_params import *
from ur_kinematics_functions import *
from markers import *

def TF2xyzquat_fm(T):

    quat = np.roll(R.from_matrix(T[0:3,0:3]).as_quat(),1)
    res = [T[0,3], T[1,3], T[2,3], quat[0], quat[1], quat[2], quat[3]]
    
    return np.array(res)

def calc_eo_quat_fm(Q, Qd):
	"""
	Calcula el error de orientacion entre dos cuaterniones
	Entradas:
	Q -- Cuaternion de orientacion actual
	Qd -- Cuaternion de orientacion deseada
	Salida:
	e_o -- Error de orientacion
	"""
	
	#Calculo de Qe = Qd * Q(-1)
	Qact = Quaternion(Q)
	Qdes = Quaternion(Qd)
	Qerr = Qdes.__mul__(Qact.inverse)
	Qe = Qerr.elements
	
	#Error de orientacion
	eo_q = Qe - np.array([1,0,0,0])

	return eo_q

def calc_eo_quat_2_fm(Q, Qd):
	"""
	Calcula el error de orientacion entre dos cuaterniones
	Entradas:
	Q -- Cuaternion de orientacion actual
	Qd -- Cuaternion de orientacion deseada
	Salida:
	e_o -- Error de orientacion
	"""
	
	Qe_e = Qd[3]*Q[0:3] - Q[3]*Qd[0:3] - np.cross(Qd[0:3],Q[0:3])
	Qe_w = Qd[3]*Q[3] + np.dot(Qd[0:3],Q[0:3]) - 1
	Qe = np.array([Qe_w,Qe_e[0],Qe_e[1],Qe_e[2]])

	return Qe

def jacobian_pose_fm(q, l, delta=0.0001):
	"""
	Jacobiano analitico para la posicion y orientacion (usando un
	cuaternion). Retorna una matriz de 7x6 y toma como entrada el vector de
	configuracion articular q=[q1, q2, q3, q4, q5, q6]

	"""
	
	# Alocacion de memoria
	J = np.zeros((7,6))
	# Transformacion homogenea inicial (usando q)
	T = fkine(q,l)
	# Iteracion para la derivada de cada columna
	for i in range(6):
		# Copiar la configuracion articular inicial (usar este dq para cada incremento en una articulacion)
		dq = copy(q)
		# Incrementar la articulacion i-esima usando un delta
		dq[i] = dq[i] + delta
		# Transformacion homogenea luego del incremento (q+dq)
		Td = fkine(dq,l)
		# Aproximacion del Jacobiano de posicion usando diferencias finitas
		Ji_p = (Td[0:3,3] - T[0:3,3])/delta
		Ji_o = (np.roll(R.from_matrix(Td[0:3,0:3]).as_quat(),1) - np.roll(R.from_matrix(T[0:3,0:3]).as_quat(),1))/delta
		J[0:3,i] = Ji_p
		J[3:,i] = Ji_o

	return J

# Initialize the node
rospy.init_node("ur5_control_diffkine_pose_rviz")
print('starting motion ... ')
# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
# Markers for the current and desired positions
bmarker_current  = FrameMarker()
bmarker_desired = FrameMarker()

# Joint names
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint',
          'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

# Initial configuration
#q0  = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0])
q0  = np.radians(np.array([-90.0, -90.0, 90.0, -90.0, -90.0, 0.0]))

# Desired position
#xd = np.array([0.6, -0.35, 0.22])
#xd = np.array([-0.10415,  0.5469,  0.236859])
xd = np.array([-0.076, 0.423, 0.309])
if check_ur_ws(xd,r_ws) == True:
	print("Desired position reachable")
else:
	print("Desired position unreachable")
# Desired orientation
#Rd = [[0,1,0],[1,0,0],[0,0,-1]]
#Qd = np.roll(R.from_matrix(Rd).as_quat(),1)
Rd = np.radians(np.array([180,0,30]))
#Rd = np.array([np.pi,0,0.79])
Qd = np.roll(quaternion_from_euler(Rd[0], Rd[1], Rd[2], 'sxyz'),1)
print(Qd)
# Desired pose
pd = np.concatenate((xd,Qd))

#Constante de ganancia cinematica
k_pos = 10
k_or = 50
#Maxmimo error admisible
epsilon = 0.001
#Flag para saber si se alcanzo la posicion deseada
Flag_e = False

# Resulting initial pose (end effector with respect to the base link)
T = fkine(q0,l)
p0 = TF2xyzquat_fm(T)

# Markers for the current and the desired pose
bmarker_current.setPose(p0)
bmarker_desired.setPose(pd)

# Instance of the JointState message
jstate = JointState()
# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q0
pub.publish(jstate)
rospy.sleep(1)

# Frequency (in Hz) and control period 
freq = 100
dt = 1.0/freq
rate = rospy.Rate(freq)

# Initial joint configuration
q = copy(q0)
# Initialize the derror vector (derivative of the error)
de = np.zeros(7)

# Main loop
while not rospy.is_shutdown():
	
	# Current time (needed for ROS)
	jstate.header.stamp = rospy.Time.now()
	
	# Kinematic control law for the pose (complete here)
	# --------------------------------------------------
	if Flag_e == False:
	
		# Jacobiano para la configuracion actual q
		J = jacobian_pose_fm(q,l)
		# Cinematica directa dada la configuracion actual q
		T = fkine(q,l)
		# Error en la posicion
		x = T[0:3,3]
		e_pos = x-xd
		#Error en la orientacion
		Q = np.roll(R.from_matrix(T[0:3,0:3]).as_quat(),1)
		e_o = calc_eo_quat_2_fm(Q,Qd)
		#Posicion y orientacion actual
		pa = TF2xyzquat_fm(T)
		#Error de posicion y orientacion
		e = np.concatenate((e_pos,e_o))
		#print(np.linalg.norm(e_pos))
		print(e_o)
		print("")
		
		if (np.linalg.norm(e)<epsilon):
			Flag_e = True
		
		else:
		
			# Derivada del error
			de = np.concatenate((-k_pos*e_pos,-k_or*e_o))
			# Variacion de la configuracion articular
			Jinv = Jacob_inv_singular(J)
			#Jinv = np.linalg.pinv(J)
			dq = Jinv.dot(de)
			# Integracion para obtener la nueva configuracion articular
			q = q + dt*dq
			#Limitar valores articulares
			q = limit_joint_pos(q,q_lim)
			
			# -----------------------------
			# Publish the message
			jstate.position = q
			pub.publish(jstate)
			bmarker_desired.setPose(pd)
			bmarker_current.setPose(pa)
		
		# Wait for the next iteration
		rate.sleep()
		
	else:
	
		# Publish the message
		jstate.position = q
		pub.publish(jstate)
		bmarker_desired.setPose(pd)
		bmarker_current.setPose(pa)
		
		# Wait for the next iteration
		rate.sleep()
