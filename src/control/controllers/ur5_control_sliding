#!/usr/bin/env python3

import rospy
import actionlib

import sys
sys.path.insert(0, '/home/sergio/ros_ws/src/utec/src/functions')
from ur5_params import *
from ur_kinematics_functions import *
from ur5_sliding_functions import *

from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

# =============================================================
# Configuracion articular inicial (rad)
q = np.radians(np.array([-90.0, -90.0, 90.0, -90.0, -90.0, 0.0]))
# Velocidad articular inicial (rad/s)
dq = np.array([0., 0., 0., 0., 0., 0.])
# Aceleracion inicial (rad/s2)
ddq = np.array([0., 0., 0., 0., 0., 0.])

# Posicion deseada
xd = np.array([-0.1017,  0.724,  0.341])
if check_ur_ws(xd,r_ws) == True:
	print("Posicion deseada alcanzable")
else:
	print("Posicion deseada inalcanzable")

# Configuracion articular deseada (rad)
qdes = ikine(xd,q,l)
# Velocidad articular deseada (rad/s)
dqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# Aceleracion articular deseada (rad/s2)
ddqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# =============================================================

# Modelo RBDL
modelo = rbdl.loadModel('/home/sergio/ros_ws/src/utec/urdf/ur5_xacro_mod.urdf')
ndof   = modelo.q_size     # Grados de libertad

# Arrays numpy para almacenar el modelo dinamico
b     = np.zeros(ndof)          # Para el vector de efectos no lineales
M     = np.zeros([ndof, ndof])  # Para la matriz de inercia

uq = np.zeros(ndof)

if __name__ == '__main__':

	rospy.init_node("ur5_control_sliding", anonymous=True, disable_signals=True)
	
	robot_client = actionlib.SimpleActionClient('/robot2/scaled_pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
	#robot_client = actionlib.SimpleActionClient('/robot2/pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
	print("Waiting for server...")
	robot_client.wait_for_server()
	print("Connected to server")

	joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

	#Configuracion articular inicial
	Q0 = q.tolist()

	g = FollowJointTrajectoryGoal()
	g.trajectory = JointTrajectory()
	g.trajectory.joint_names = joint_names

	# Posicion articular inicial
	g.trajectory.points = [JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(1.0))]
	robot_client.send_goal(g)
	robot_client.wait_for_result()
	rospy.sleep(1)

	# Frecuencia del envio (en Hz)
	freq = 100
	rate = rospy.Rate(freq)
	# Tiempo de muestreo
	dt = 1.0/freq	
	t = 1.0 + dt

	# Simulador dinamico del robot
	robot = Robot(q, dq, ndof, dt)

	# Parametros del controlador por modo deslizante
	vlambd = 10*np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) 
	lambd = np.diag(vlambd)	
	phi = 0.1
	eta = 0.1
	alpha = 1

	#Maxmimo error admisible
	epsilon = 1e-3
	#Flag para saber si se alcanzo los valores de q deseados
	Flag_pd = False
	
while not rospy.is_shutdown():

	#Se verifica si se alcanzo la posicion deseada
	if Flag_pd == False:

		# Leer valores del simulador dinamico
		q  = robot.read_joint_positions() 
		dq = robot.read_joint_velocities()

		#Error de posicion y velocidad de las articulaciones
		err = qdes - q
		derr = dqdes - dq
		#print("Error: {}".format(np.round(np.linalg.norm(err),4))); 

		#Activar Flag si el error es menor al admisible
		if (np.linalg.norm(err)<epsilon):
			Flag_pd = True
			#print("Posicion deseada alcanzada")
		
		else:

			# Control dinamico

			#Matriz de inercia
			rbdl.CompositeRigidBodyAlgorithm(modelo, q, M)
			#Vector de efectos no lineales
			rbdl.NonlinearEffects(modelo, q, dq, b)

			# Superficie de deslizamiento
			s = derr + np.dot(lambd,err)

			# Parametro k			
			#k = eta + abs(alpha*np.dot(M,(ddqdes-np.dot(lambd,derr))) + alpha*b)
			k = 1

			# Esfuerzo de control						
			u = b + np.dot(M,(ddqdes+s+k*np.sign(s))) 
			#u = b + np.dot(M,(ddqdes+s+k*sat_fnc(s,phi))) 

			# Simulacion dinamica del robot
			robot.send_command(u)
			uq  = robot.read_joint_positions()

			#Se le asigna al Q0 la configuracion articular hallada
			Q0 = uq.tolist()

			g.trajectory.points = [JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(t))]
			robot_client.send_goal(g)
			#robot_client.wait_for_result()

		t = t + dt
		
		# Esperar hasta la siguiente  iteracion
		rate.sleep()

	else:

		#Se le asigna al Q0 la configuracion articular hallada
		#Q0 = q.tolist()

		#g.trajectory.points = [JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(t))]
		#robot_client.send_goal(g)
		#robot_client.wait_for_result()

		t = t + dt
		
		# Esperar hasta la siguiente  iteracion
		rate.sleep()
