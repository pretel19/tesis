#!/usr/bin/env python3

import rospy
import actionlib
import tf

import sys
sys.path.insert(0, '/home/sergio/ros_ws/src/utec/src/functions')
from ur5_params import *
from ur_kinematics_functions import *
from ur5_sliding_functions import *

from sensor_msgs.msg import JointState
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint

#ur5_control = open("/home/sergio/ros_ws/src/utec/data/ur5_sliding_sign_sim_ga_updated.txt", "w") 
ur5_control = open("/home/sergio/ros_ws/src/utec/data/empty1.txt", "w") 
ur5_control.truncate(0)

# =============================================================
# Configuracion articular inicial (rad)
q = np.radians(np.array([-90.0, -90.0, 90.0, -90.0, -90.0, 0.0]))
# Velocidad articular inicial (rad/s)
dq = np.array([0., 0., 0., 0., 0., 0.])
# Aceleracion inicial (rad/s2)
ddq = np.array([0., 0., 0., 0., 0., 0.])

# Posicion deseada
#xd = np.array([-0.1017,  0.724,  0.341])
#xd = np.array([-0.1246,  0.6522,  0.5965])
#xd = np.array([-0.0436,  0.7307,  0.4112])
xd = np.array([-0.10415,  0.7469,  0.236859])
if check_ur_ws(xd,r_ws):
	print("Posicion deseada alcanzable")
else:
	print("Posicion deseada inalcanzable")

# Configuracion articular deseada (rad)
qdes = ikine(xd,q,l)
print(qdes)
# Velocidad articular deseada (rad/s)
dqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# Aceleracion articular deseada (rad/s2)
ddqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# =============================================================

# Modelo RBDL
modelo = rbdl.loadModel('/home/sergio/ros_ws/src/utec/urdf/ur5_xacro_mod.urdf')
ndof   = modelo.q_size     # Grados de libertad

# Arrays numpy para almacenar el modelo dinamico
b     = np.zeros(ndof)          # Para el vector de efectos no lineales
M     = np.zeros([ndof, ndof])  # Para la matriz de inercia
Mtemp = np.zeros([ndof, ndof])

q_real = np.zeros(ndof)
dq_real = np.zeros(ndof)
uq = np.zeros(ndof)

def callback(msg):

	global q_real, dq_real
	
	q_real = msg.position
	q_real = np.asarray(q_real)
	q_real[[0,2]] = q_real[[2,0]]

	dq_real = msg.velocity
	dq_real = np.asarray(dq_real)
	dq_real[[0,2]] = dq_real[[2,0]]

if __name__ == '__main__':

	rospy.init_node("ur5_control_sliding_data", anonymous=True, disable_signals=True)
	
	rospy.Subscriber("/robot2/joint_states", JointState, callback)
	
	tf_listener = tf.TransformListener()
	
	#robot_client = actionlib.SimpleActionClient('/robot2/scaled_pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
	robot_client = actionlib.SimpleActionClient('/robot2/pos_joint_traj_controller/follow_joint_trajectory', FollowJointTrajectoryAction)
	print("Waiting for server...")
	robot_client.wait_for_server()
	print("Connected to server")

	joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']

	#Configuracion articular inicial
	Q0 = q.tolist()

	g = FollowJointTrajectoryGoal()
	g.trajectory = JointTrajectory()
	g.trajectory.joint_names = joint_names

	# Posicion articular inicial
	g.trajectory.points = [JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(1.0))]
	robot_client.send_goal(g)
	robot_client.wait_for_result()
	rospy.sleep(1)

	# Frecuencia del envio (en Hz)
	freq = 100
	rate = rospy.Rate(freq)
	# Tiempo de muestreo
	dt = 1.0/freq	
	t = 1.0 + dt

	# Simulador dinamico del robot
	robot = Robot(q, dq, ddq, ndof, dt)

	# Parametros del controlador por modo deslizante
	#12.9024    0.4716
	#13.9486    1.0000
	vlambd = 10000*np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
	lambd = np.diag(vlambd)	
	eta = 1000
	phi = 0.01
	alpha = 1.0

	#Maxmimo error admisible
	epsilon = 1e-4
	#Flag para saber si se alcanzo los valores de q deseados
	Flag_pd = False
	
while not rospy.is_shutdown():

	#Se verifica si se alcanzo la posicion deseada
	if Flag_pd == False:

		# Leer valores del simulador dinamico
		#q  = robot.read_joint_positions() 
		#dq = robot.read_joint_velocities()
		q = q_real
		dq = dq_real
		robot.update_q(q, dq)

		#Error de posicion y velocidad de las articulaciones
		err = qdes - q
		derr = dqdes - dq
		
		trans = fkine(q_real,l)[0:3,3]
		
		print("Error: {}".format(np.round(np.linalg.norm(xd-trans),4))); 

		#Activar Flag si el error es menor al admisible
		if (np.linalg.norm(xd-trans)<epsilon):
			Flag_pd = True
			print("Posicion deseada alcanzada")
			#robot_client.wait_for_result()
			robot_client.cancel_all_goals()
		
		else:

			# Control dinamico

			#Matriz de inercia
			rbdl.CompositeRigidBodyAlgorithm(modelo, q, M)
			#Vector de efectos no lineales
			rbdl.NonlinearEffects(modelo, q, dq, b)

			# Derivada de la matriz de inercia
			#dM = (M - Mtemp)/dt
			#print(dM)
			#Mtemp = M

			# Superficie de deslizamiento
			s = derr + np.dot(lambd,err)

			# Parametro k
			#k = eta + abs(alpha*np.dot(M,(ddqdes-np.dot(lambd,derr))) + alpha*b + (1-alpha)*np.dot(dM,(dqdes-np.dot(lambd,err))))			
			k = eta + abs(alpha*np.dot(M,(ddqdes-np.dot(lambd,derr))) + alpha*b)
			#k = 1

			# Esfuerzo de control
			#u = b + np.dot(M,ddqdes) - np.dot(np.dot(M,lambd),derr) - np.multiply(k,sat_fnc(s,phi))
			#u = b + np.dot(M,ddqdes) - np.dot(np.dot(M,lambd),derr) - np.multiply(k,np.sign(s))			
			#u = b + np.dot(M,ddqdes) - np.dot(np.dot(M,lambd),derr)
			
			u = b + np.dot(M,(ddqdes+s+k*np.sign(s)))
			#u = b + np.dot(M,(ddqdes+s+k*sat_fnc(s,phi)))
			#print(u)

			# Simulacion dinamica del robot
			#robot.send_command(u)
			#uq  = robot.read_joint_positions()
			
			uq = robot.torque_to_pos(u)
			
			#uq = limit_joint_pos(uq,q_lim)
			#print(uq)
			
			#Se le asigna al Q0 la configuracion articular hallada
			Q0 = uq.tolist()
			#print(Q0) 		
			
			g.trajectory.points = [JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(t))]
			robot_client.send_goal(g)
			#robot_client.wait_for_result()

		t = t + dt
		#print(t)
		
		#(trans,rot) = tf_listener.lookupTransform('robot2/base', 'robot2/wrist_3_link', rospy.Time(0))
		trans = fkine(q_real,l)[0:3,3]
						
		ur5_control.write(str(trans[0])+' '+str(trans[1])+' '+str(trans[2])+' '+str(q_real[0])+' '+str(q_real[1])+' '+str(q_real[2])+' '+str(q_real[3])+' '+str(q_real[4])+' '+str(q_real[5])+' '+str(u[0])+' '+str(u[1])+' '+str(u[2])+' '+str(u[3])+' '+str(u[4])+' '+str(u[5])+' '+str(t)+'\n ')
		
		# Esperar hasta la siguiente  iteracion
		rate.sleep()

	else:

		#Se le asigna al Q0 la configuracion articular hallada
		#Q0 = q.tolist()
		#print(Q0) 

		#g.trajectory.points = [JointTrajectoryPoint(positions=Q0,time_from_start=rospy.Duration(t))]
		#robot_client.cancel_all_goals()
		#robot_client.wait_for_result()

		t = t + dt
		#print(t)

		#(trans,rot) = tf_listener.lookupTransform('robot2/base', 'robot2/wrist_3_link', rospy.Time(0))
		trans = fkine(q_real,l)[0:3,3]

		ur5_control.write(str(trans[0])+' '+str(trans[1])+' '+str(trans[2])+' '+str(q_real[0])+' '+str(q_real[1])+' '+str(q_real[2])+' '+str(q_real[3])+' '+str(q_real[4])+' '+str(q_real[5])+' '+str(u[0])+' '+str(u[1])+' '+str(u[2])+' '+str(u[3])+' '+str(u[4])+' '+str(u[5])+' '+str(t)+'\n ')

		# Esperar hasta la siguiente  iteracion
		rate.sleep()
		
ur5_control.close()
