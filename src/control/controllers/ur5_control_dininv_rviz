#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from roslib import packages

import sys
sys.path.insert(0, '/home/sergio/ros_ws/src/utec/src/functions')
from ur5_params import *
from ur_kinematics_functions import *
from ur5_sliding_functions import *

#Maxmimo error admisible
epsilon = 1e-3
#Flag para saber si se alcanzo los valores de q deseados
Flag_pd = False

rospy.init_node("ur5_control_dininv_rviz")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

# Nombres de las articulaciones
jnames = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint',
          'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
# Objeto (mensaje) de tipo JointState
jstate = JointState()
# Valores del mensaje
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames

# =============================================================
# Configuracion articular inicial (en radianes)
q = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0])
# Velocidad inicial
dq = np.array([0., 0., 0., 0., 0., 0.])
# Aceleracion inicial
ddq = np.array([0., 0., 0., 0., 0., 0.])

# Configuracion articular deseada
qdes = np.array([1.0, -1.0, 1.0, 1.3, -1.5, 1.0])
# Velocidad articular deseada
dqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# Aceleracion articular deseada
ddqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
# =============================================================

# Frecuencia del envio (en Hz)
freq = 200
dt = 1.0/freq
rate = rospy.Rate(freq)

# Modelo RBDL
modelo = rbdl.loadModel('/home/sergio/ros_ws/src/utec/urdf/ur5_robot.urdf')
ndof   = modelo.q_size     # Grados de libertad
zeros = np.zeros(ndof)     # Vector de ceros

# Simulador dinamico del robot
robot = Robot(q, dq, ndof, dt)

# Arrays numpy
g     = np.zeros(ndof)          # Para la gravedad
c     = np.zeros(ndof)          # Para el vector de Coriolis+centrifuga
Mtemp = np.zeros(ndof)          # Vector temporal para la matriz de inercia
M     = np.zeros([ndof, ndof])  # Para la matriz de inercia
e     = np.eye(6)               # Vector identidad

# Bucle de ejecucion continua
t = 0.0

# Se definen las ganancias del controlador
valores = 5*np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
Kp = np.diag(valores)
Kd = 2*np.sqrt(Kp)

while not rospy.is_shutdown():

	#Se verifica si se alcanzo la posicion deseada o
	#se alcanzo el tiempo maximo
	if Flag_pd == False:

		# Leer valores del simulador
		q  = robot.read_joint_positions()
		dq = robot.read_joint_velocities()
		# Tiempo actual (necesario como indicador para ROS)
		jstate.header.stamp = rospy.Time.now()

		#Error de las articulaciones
		error = qdes - q 
		print("Error: {}".format(np.round(np.linalg.norm(error),4))); 

		#Activar Flag si el error es menor al admisible o 
		#si se alcanzo el tiempo maximo
		if (np.linalg.norm(error)<epsilon):
			Flag_pd = True

		# Control dinamico 		

		#Vector gravedad
		rbdl.InverseDynamics(modelo, q, zeros, zeros, g)
		#Vector de fuerza centrifuga y Coriolis
		rbdl.InverseDynamics(modelo, q, dq, zeros, c)
		c = c-g
		#Matriz de inercia
		for i in range(ndof):
			rbdl.InverseDynamics(modelo, q, zeros, e[i], Mtemp)
			M[:,i] = Mtemp - g

		y = ddqdes + np.dot(Kd,dqdes-dq) + np.dot(Kp,qdes-q)
		u = np.dot(M,y) + c + g #Ley de control

		# Simulacion del robot
		robot.send_command(u)

		# Publicacion del mensaje
		jstate.position = q
		pub.publish(jstate)
		t = t+dt
		# Esperar hasta la siguiente  iteracion
		rate.sleep()

	else:

		# Publicacion del mensaje
		jstate.position = q
		pub.publish(jstate)
		t = t+dt
		# Esperar hasta la siguiente  iteracion
		rate.sleep()
